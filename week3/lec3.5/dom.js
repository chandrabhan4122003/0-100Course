// DOM
// Document Object Model 
// javascript makes the html page active and dynamic via the dom

// what is dom 
// a programming interface for web documents 
// dom is not a programming language
// represent teh page so that programs can change the documentstructure
// the dom is a tree like representatino of the web page that gets loaded inot the browser
// the dom represents the documents as nodes and objects 
// without it the javascript language would not be any model or notion of web pages , html documents ,svg documetns and their components parts 
// web api used to build websites 

// notes see from the slides of this video 
// 

// wheen  a browser parses an html document ,it builds a dom tree and then uses it to display the document 
// Document Object 
// it has properties and methods which you can use to get information about

// the createElement() method
// create a specified element and insert it to the DOM
const para =document.createElement("p")
para.innerText="this is a paragraph created via DOM"
document.body.appenChild(para);

// getElementsByClassName
// finding html elements by css Selectors :querySelector

// dynamic html content
// dynamic html content is the content that is generated by the javascript code at runtime
// setAttribute()
// vs style


// adding and deleting elements 
// createElement
// removeChild
// appendChild
// replaceChild
// write

// DOM Nodes
// The entire document is a
// document node
// Every HTML element is an
// element
// The text inside HTML elements
// are text nodes
// Every HTML attribute is an
// attribute node (deprecated)
// All comments are comment nodes

// The node method 
// childNodes

// node.childNodes — accesses the child nodes of a selected parent
// node.firstChild accesses the first child of a selected parent
// node.lastChild — accesses the last child of a selected parent.
// node.parentNode — accesses the parent of a selected child node.
// node.nextSibling — accesses the next consecutive element (sibling) of a
// selected element.
// node.previousSibling — accesses the previous element (sibling) of a select
// element

// DOM EventListener
// Attaches an event handler to the specified element (without overwriting existing event
// handlers).
// You can add many event handlers(even of the same type) to one element,
// You can add event listeners to any DOM object not only HTML elements. i.e the window
// object
// The addEventListener() method makes it easier to control how the event reacts to
// bubbling.
// When using the addEventListener() method, the JavaScript is separated from the HTML
// markup, for better readability and allows you to add event listeners even when you do not
// control the HTML markup.
// You can easily remove an event listener by using the removeEventListener() method.

// Event Bubbling or Event Capturing?
// Two ways of event propagation in the HTML DOM - bubbling and capturing.
// Event propagation is a way of defining the element order when an event occurs. If
// you have a element inside a <div> element, and the user clicks on the
// element, which element's "click" event should be handled first?
// In bubbling the inner most element's event is handled first and then the outer: the
// element's click event is handled first, then the <div> element's click event.
// In capturing the outer most element's event is handled first and then the inner: the <div>
// element's click event will be handled first, then the element's click event.